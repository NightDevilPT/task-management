Hi i am full stack developer and having one project name is Task Management System.
Prisma Schema : `
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TeamInviteStatus {
  PENDING
  ACCEPTED
  DECLINED
} 

enum TeamRole {
  ADMIN
  MANAGER
  MEMBER
}

enum ProjectStatus {
  ACTIVE
  ARCHIVED
  COMPLETED
  ON_HOLD
}

enum TaskStatusEnum {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  BLOCKED
}

enum TaskPriorityEnum {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model User {
  id           String   @id @default(cuid())
  firstName    String
  lastName     String
  username     String   @unique
  email        String   @unique
  avatar       String?  // URL to avatar image
  isVerified   Boolean  @default(false)
  password     String
  otp          Int?     // For JWT to verify email or reset password
  otpExpiry    DateTime? @map("otp_expiry") // Expiry time for the token
  refreshToken String?  // For JWT refresh tokens
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  lastLogin    DateTime?
  isActive     Boolean  @default(true)
  
  // Relations
  teamMemberships TeamMember[]
  createdTeams    Team[]      @relation("TeamOwner")
  createdTasks    Task[]      @relation("TaskCreator")
  assignedTasks   Task[]      @relation("TaskAssignee")
  notifications   Notification[]
  activities      Activity[]
  teamInvites     TeamInvite[]
  comments        Comment[]
  attachments     Attachment[]
  createdProjects Project[] @relation("ProjectOwner")

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  owner      User         @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId    String
  teams      Team[]
  tasks      Task[]
  activities Activity[]
  
  @@map("projects")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  owner      User         @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId    String
  project    Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String
  members    TeamMember[]
  tasks      Task[]
  invites    TeamInvite[]
  activities Activity[]
  
  @@map("teams")
}

model TeamMember {
  id        String   @id @default(cuid())
  role      TeamRole @default(MEMBER)
  joinedAt  DateTime @default(now()) @map("joined_at")
  
  // Relations
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  team      Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  
  @@unique([userId, teamId])
  @@map("team_members")
}

model TeamInvite {
  id        String   @id @default(cuid())
  email     String
  role      TeamRole @default(MEMBER)
  token     String   @unique
  status   TeamInviteStatus   @default(PENDING) // e.g., PENDING, ACCEPTED, DECLINED
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  team      Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  invitedBy User   @relation(fields: [invitedById], references: [id], onDelete: Cascade)
  invitedById String
  
  @@unique([email, teamId])
  @@map("team_invites")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      TaskStatusEnum   @default(TODO)
  priority    TaskPriorityEnum   @default(MEDIUM)
  dueDate     DateTime? @map("due_date")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  assignedTo  User?   @relation("TaskAssignee", fields: [assignedToId], references: [id], onDelete: SetNull)
  assignedToId String?
  createdBy   User    @relation("TaskCreator", fields: [createdById], references: [id], onDelete: Cascade)
  createdById String
  team        Team?   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId      String?
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  comments    Comment[]
  attachments Attachment[]
  activities  Activity[]
  
  @@map("tasks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  author    User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  task      Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  
  @@map("comments")
}

model Attachment {
  id        String   @id @default(cuid())
  filename  String
  url       String
  size      Int
  type      String
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  task      Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  uploadedBy User  @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  uploadedById String
  
  @@map("attachments")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String   // e.g., "TASK_ASSIGNED", "INVITE_RECEIVED", "COMMENT_ADDED"
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  
  @@map("notifications")
}

model Activity {
  id        String   @id @default(cuid())
  action    String   // e.g., "CREATE_TASK", "UPDATE_TASK", "JOIN_TEAM"
  details   String?
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  team      Team?  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String?
  task      Task?  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?
  
  @@map("activities")
}
`

API's i want to create : `
# Task Management System

Of course. This is a crucial planning step. Here's a comprehensive list of API routes you'll need to build for your Task Management System, organized by module.

# Task Management System

This document lists all planned API routes for the Task Management System, organized by module. Each route includes its implementation status.

---

## Authentication Routes (`/api/auth/[...]`)

| Method | Endpoint                    | Description                    | Status                                             |
| :----- | :-------------------------- | :----------------------------- | :------------------------------------------------- |
| `POST` | `/api/auth/register`        | Create a new user account      | <p style="color:green; font-weight:bold;">DONE</p> |
| `POST` | `/api/auth/login`           | Login user & return JWT token  | <p style="color:green; font-weight:bold;">DONE</p> |
| `POST` | `/api/auth/logout`          | Logout user (invalidate token) | <p style="color:green; font-weight:bold;">DONE</p> |
| `PUT`  | `/api/auth/verify`          | Verify User                    | <p style="color:green; font-weight:bold;">DONE</p> |
| `GET`  | `/api/auth/me`              | Get current user's profile     | <p style="color:green; font-weight:bold;">DONE</p> |
| `PUT`  | `/api/auth/me`              | Update current user's profile  | <p style="color:green; font-weight:bold;">DONE</p> |
| `POST` | `/api/auth/forgot-password` | Request password reset email   | <p style="color:green; font-weight:bold;">DONE</p> |
| `POST` | `/api/auth/reset-password`  | Reset password with token      | <p style="color:green; font-weight:bold;">DONE</p> |

---

## User Routes (`/api/users/[...]`)

| Method | Endpoint                           | Description                          | Status                                            |
| :----- | :--------------------------------- | :----------------------------------- | :------------------------------------------------ |
| `GET`  | `/api/users`                       | Get all users (for mentions/search)  | <p style="color:blue; font-weight:bold;">TODO</p> |
| `GET`  | `/api/users/:userId`               | Get a specific user's public profile | <p style="color:blue; font-weight:bold;">TODO</p> |
| `GET`  | `/api/users/me/teams`              | Get current user's teams & roles     | <p style="color:blue; font-weight:bold;">TODO</p> |
| `GET`  | `/api/users/me/tasks`              | Get current user's assigned tasks    | <p style="color:blue; font-weight:bold;">TODO</p> |
| `GET`  | `/api/users/me/notifications`      | Get current user's notifications     | <p style="color:blue; font-weight:bold;">TODO</p> |
| `PUT`  | `/api/users/me/notifications/read` | Mark notifications as read           | <p style="color:blue; font-weight:bold;">TODO</p> |

---

## Project Routes (`/api/projects/[...]`)

| Method   | Endpoint                            | Description                                                 | Status                                             |
| :------- | :---------------------------------- | :---------------------------------------------------------- | :------------------------------------------------- |
| `POST`   | `/api/projects`                     | Create a new project                                        | <p style="color:green; font-weight:bold;">DONE</p> |
| `GET`    | `/api/projects`                     | Get all projects owned or member-associated by current user | <p style="color:green; font-weight:bold;">DONE</p> |
| `GET`    | `/api/projects/:projectId`          | Get details of a specific project                           | <p style="color:green; font-weight:bold;">DONE</p> |
| `PUT`    | `/api/projects/:projectId`          | Update project details (Owner only)                         | <p style="color:green; font-weight:bold;">DONE</p> |
| `DELETE` | `/api/projects/:projectId`          | Delete/archive a project (Owner only)                       | <p style="color:blue; font-weight:bold;">TODO</p>  |
| `GET`    | `/api/projects/:projectId/teams`    | Get all teams under a project                               | <p style="color:blue; font-weight:bold;">TODO</p>  |
| `GET`    | `/api/projects/:projectId/tasks`    | Get all tasks under a project (aggregate from teams)        | <p style="color:blue; font-weight:bold;">TODO</p>  |
| `GET`    | `/api/projects/:projectId/activity` | Get activity feed for a project                             | <p style="color:blue; font-weight:bold;">TODO</p>  |

---

## Team Routes (`/api/teams/[...]`)

| Method | Endpoint                                 | Description                             | Status                                             |
| :----- | :--------------------------------------- | :-------------------------------------- | :------------------------------------------------- |
| `POST` | `/api/teams/create-team`                 | Create a new team                       | <p style="color:green; font-weight:bold;">DONE</p> |
| `GET`  | `/api/teams/get-teams`                   | Get all teams current user is member of | <p style="color:green; font-weight:bold;">DONE</p> |
| `GET`  | `/api/teams/get-team-by-id/:[teamId]`    | Get a specific team's details           | <p style="color:green; font-weight:bold;">DONE</p> |
| `PUT`  | `/api/teams/update-team-by-id/:[teamId]` | Update team details (Admin only)        | <p style="color:green; font-weight:bold;">DONE</p> |

---

## Task Routes (`/api/teams/:teamId/tasks/[...]`)

| Method   | Endpoint                                  | Description                               | Status                                            |
| :------- | :---------------------------------------- | :---------------------------------------- | :------------------------------------------------ |
| `POST`   | `/api/teams/:teamId/tasks`                | Create a new task in a team               | <p style="color:blue; font-weight:bold;">TODO</p> |
| `GET`    | `/api/teams/:teamId/tasks`                | Get all tasks for a team (with filters)   | <p style="color:blue; font-weight:bold;">TODO</p> |
| `GET`    | `/api/teams/:teamId/tasks/:taskId`        | Get a specific task's details             | <p style="color:blue; font-weight:bold;">TODO</p> |
| `PUT`    | `/api/teams/:teamId/tasks/:taskId`        | Update a task                             | <p style="color:blue; font-weight:bold;">TODO</p> |
| `DELETE` | `/api/teams/:teamId/tasks/:taskId`        | Delete a task                             | <p style="color:blue; font-weight:bold;">TODO</p> |
| `PUT`    | `/api/teams/:teamId/tasks/:taskId/status` | Update task status (e.g., move on Kanban) | <p style="color:blue; font-weight:bold;">TODO</p> |
| `PUT`    | `/api/teams/:teamId/tasks/:taskId/assign` | Assign/unassign a task to a user          | <p style="color:blue; font-weight:bold;">TODO</p> |

---

## Comment Routes (`/api/teams/:teamId/tasks/:taskId/comments/[...]`)

| Method   | Endpoint                  | Description                 | Status                                            |
| :------- | :------------------------ | :-------------------------- | :------------------------------------------------ |
| `POST`   | `.../comments`            | Add a comment to a task     | <p style="color:blue; font-weight:bold;">TODO</p> |
| `GET`    | `.../comments`            | Get all comments for a task | <p style="color:blue; font-weight:bold;">TODO</p> |
| `PUT`    | `.../comments/:commentId` | Edit a comment              | <p style="color:blue; font-weight:bold;">TODO</p> |
| `DELETE` | `.../comments/:commentId` | Delete a comment            | <p style="color:blue; font-weight:bold;">TODO</p> |

---

## Attachment Routes (`/api/teams/:teamId/tasks/:taskId/attachments/[...]`)

| Method   | Endpoint                        | Description                    | Status                                            |
| :------- | :------------------------------ | :----------------------------- | :------------------------------------------------ |
| `POST`   | `.../attachments`               | Upload a file to a task        | <p style="color:blue; font-weight:bold;">TODO</p> |
| `GET`    | `.../attachments`               | Get all attachments for a task | <p style="color:blue; font-weight:bold;">TODO</p> |
| `DELETE` | `.../attachments/:attachmentId` | Delete an attachment           | <p style="color:blue; font-weight:bold;">TODO</p> |

---

## Activity & Notification Routes (`/api/[...]`)

| Method | Endpoint                      | Description                             | Status                                            |
| :----- | :---------------------------- | :-------------------------------------- | :------------------------------------------------ |
| `GET`  | `/api/teams/:teamId/activity` | Get recent activity for a team          | <p style="color:blue; font-weight:bold;">TODO</p> |
| `GET`  | `/api/me/activity`            | Get current user's global activity feed | <p style="color:blue; font-weight:bold;">TODO</p> |

---

## Summary of Route Structure

Your API structure will look like this in the `app/api/` directory:

```
app/api/
├── auth/
│   ├── register/route.ts
│   ├── login/route.ts
│   ├── logout/route.ts
│   ├── me/route.ts
│   └── ...
├── users/
│   ├── route.ts          # GET /api/users
│   ├── [userId]/route.ts # GET /api/users/:userId
│   └── me/
│       ├── teams/route.ts
│       ├── tasks/route.ts
│       └── notifications/route.ts
├── teams/
│   ├── route.ts                      # GET, POST /api/teams
│   ├── [teamId]/
│   │   ├── route.ts                  # GET, PUT, DELETE /api/teams/:teamId
│   │   ├── members/
│   │   │   ├── route.ts              # GET /api/teams/:teamId/members
│   │   │   └── [userId]/route.ts     # PUT, DELETE /api/teams/:teamId/members/:userId
│   │   ├── invites/
│   │   │   ├── route.ts              # GET, POST /api/teams/:teamId/invites
│   │   │   └── [inviteId]/route.ts   # DELETE /api/teams/:teamId/invites/:inviteId
│   │   └── tasks/
│   │       ├── route.ts              # GET, POST /api/teams/:teamId/tasks
│   │       └── [taskId]/
│   │           ├── route.ts          # GET, PUT, DELETE /api/teams/:teamId/tasks/:taskId
│   │           ├── comments/
│   │           │   ├── route.ts
│   │           │   └── [commentId]/route.ts
│   │           └── attachments/
│   │               ├── route.ts
│   │               └── [attachmentId]/route.ts
│   └── invites/
│       └── [token]/
│           ├── accept/route.ts
│           └── decline/route.ts
└── me/
    ├── notifications/route.ts
    └── activity/route.ts
```

**Priority Order for Implementation (MVP First):**

1.  Auth Routes (`/api/auth/*`)
2.  Team Routes (`/api/teams`, `/api/teams/[teamId]`)
3.  Task Routes (`/api/teams/[teamId]/tasks`)
4.  Comment Routes
5.  Invite & Member Routes
6.  The rest (Attachments, Activity, etc.)

<hr>

```mermaid
flowchart TD
    User

    User -->|teamMemberships| TeamMember
    User -->|createdTeams| Team
    User -->|createdTasks| Task
    User -->|assignedTasks| Task
    User -->|teamInvites| TeamInvite
    User -->|comments| Comment
    User -->|attachments| Attachment
    User -->|notifications| Notification
    User -->|activities| Activity

    subgraph TeamContext [Team & Membership]
        TeamMember -->|defines role in| Team
    end

    subgraph TaskContext [Task & Collaboration]
        Comment
        Attachment
    end

    subgraph System [System & Logging]
        Notification
        Activity
    end
```
```

Please memorize this all the code in you memory so i can proceed the development with you