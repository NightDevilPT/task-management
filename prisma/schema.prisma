generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TeamInviteStatus {
  PENDING
  ACCEPTED
  DECLINED
} 

enum TeamRole {
  ADMIN
  MANAGER
  MEMBER
}

enum ProjectStatus {
  ACTIVE
  ARCHIVED
  COMPLETED
  ON_HOLD
}

enum TaskStatusEnum {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  BLOCKED
}

enum TaskPriorityEnum {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model User {
  id           String   @id @default(cuid())
  firstName    String
  lastName     String
  username     String   @unique
  email        String   @unique
  avatar       String?  // URL to avatar image
  isVerified   Boolean  @default(false)
  password     String
  otp          Int?     // For JWT to verify email or reset password
  otpExpiry    DateTime? @map("otp_expiry") // Expiry time for the token
  refreshToken String?  // For JWT refresh tokens
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  lastLogin    DateTime?
  isActive     Boolean  @default(true)
  
  // Relations
  teamMemberships TeamMember[]
  createdTeams    Team[]      @relation("TeamOwner")
  createdTasks    Task[]      @relation("TaskCreator")
  assignedTasks   Task[]      @relation("TaskAssignee")
  notifications   Notification[]
  activities      Activity[]
  teamInvites     TeamInvite[]
  comments        Comment[]
  attachments     Attachment[]
  createdProjects Project[] @relation("ProjectOwner")

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  owner      User         @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId    String
  teams      Team[]
  tasks      Task[]
  activities Activity[]
  teamMembers TeamMember[] // Opposite relation for TeamMember.project
  teamInvites TeamInvite[] // Opposite relation for TeamInvite.project
  comments    Comment[]    // Opposite relation for Comment.project
  attachments Attachment[] // Opposite relation for Attachment.project
  notifications Notification[] // Opposite relation for Notification.project
  
  @@map("projects")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  owner      User         @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId    String
  project    Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String
  members    TeamMember[]
  tasks      Task[]
  invites    TeamInvite[]
  activities Activity[]
  
  @@map("teams")
}

model TeamMember {
  id        String   @id @default(cuid())
  role      TeamRole @default(MEMBER)
  joinedAt  DateTime @default(now()) @map("joined_at")
  
  // Relations
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  team      Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  
  @@unique([userId, teamId])
  @@unique([userId, projectId, teamId]) // Ensure unique membership per project-team combination
  @@map("team_members")
}

model TeamInvite {
  id        String   @id @default(cuid())
  email     String
  role      TeamRole @default(MEMBER)
  token     String   @unique
  status   TeamInviteStatus   @default(PENDING) // e.g., PENDING, ACCEPTED, DECLINED
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  team      Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  invitedBy User   @relation(fields: [invitedById], references: [id], onDelete: Cascade)
  invitedById String
  
  @@unique([email, teamId])
  @@map("team_invites")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      TaskStatusEnum   @default(TODO)
  priority    TaskPriorityEnum   @default(MEDIUM)
  dueDate     DateTime? @map("due_date")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  assignedTo  User?   @relation("TaskAssignee", fields: [assignedToId], references: [id], onDelete: SetNull)
  assignedToId String?
  createdBy   User    @relation("TaskCreator", fields: [createdById], references: [id], onDelete: Cascade)
  createdById String
  team        Team?   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId      String?
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  comments    Comment[]
  attachments Attachment[]
  activities  Activity[]
  
  @@map("tasks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  author    User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  task      Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  
  @@map("comments")
}

model Attachment {
  id        String   @id @default(cuid())
  filename  String
  url       String
  size      Int
  type      String
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  task      Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  uploadedBy User  @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  uploadedById String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  
  @@map("attachments")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String   // e.g., "TASK_ASSIGNED", "INVITE_RECEIVED", "COMMENT_ADDED"
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?
  
  @@map("notifications")
}

model Activity {
  id        String   @id @default(cuid())
  action    String   // e.g., "CREATE_TASK", "UPDATE_TASK", "JOIN_TEAM"
  details   String?
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  team      Team?  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String?
  task      Task?  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String?
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  
  @@map("activities")
}